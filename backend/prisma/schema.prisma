generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ------------------------------
// MODELS
// ------------------------------

model Client {
  id        Int    @id @default(autoincrement())
  firstName String
  lastName  String
  phone     String
  email     String

  // Relations
  addresses     Address[]   @relation("ClientAddresses")
  horses        Horse[]     @relation("ClientHorses")
  invoices      Invoice[]   @relation("ClientInvoices")
  distancesFrom Distance[]  @relation("ClientDistancesFrom")
  distancesTo   Distance[]  @relation("ClientDistancesTo")
  scanEvents    ScanEvent[] @relation("ClientScans")
}

model Horse {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  // Service (optional)
  service   Service? @relation("HorseService", fields: [serviceId], references: [id])
  serviceId Int?

  // Client (required)
  client   Client @relation("ClientHorses", fields: [clientId], references: [id])
  clientId Int

  // Relations
  scanEvents   ScanEvent[]   @relation("HorseScans")
  invoiceItems InvoiceItem[] @relation("HorseInvoiceItems")
}

model Service {
  id    Int    @id @default(autoincrement())
  name  String
  price Float

  // Relations
  scanEvents   ScanEvent[]   @relation("ScanEventService")
  horses       Horse[]       @relation("HorseService")
  invoiceItems InvoiceItem[] @relation("InvoiceItemService")
}

model Distance {
  fromClient   Client @relation("ClientDistancesFrom", fields: [fromClientId], references: [id])
  fromClientId Int

  toClient   Client @relation("ClientDistancesTo", fields: [toClientId], references: [id])
  toClientId Int

  distanceMiles Float
  travelTimeMin Int

  @@id([fromClientId, toClientId])
}

model Employee {
  id    Int    @id @default(autoincrement())
  name  String
  phone String

  // Relations
  timecards  Timecard[]  @relation("EmployeeTimecards")
  scanEvents ScanEvent[] @relation("EmployeeScans")
}

model Timecard {
  id       Int       @id @default(autoincrement())
  clockIn  DateTime  @default(now())
  clockOut DateTime?

  employee   Employee @relation("EmployeeTimecards", fields: [employeeId], references: [id])
  employeeId Int
}

model Invoice {
  id   Int      @id @default(autoincrement())
  date DateTime @default(now())

  client   Client @relation("ClientInvoices", fields: [clientId], references: [id])
  clientId Int

  // Relations
  items      InvoiceItem[] @relation("InvoiceItems")
  scanEvents ScanEvent[]   @relation("InvoiceScans")
}

model InvoiceItem {
  id        Int   @id @default(autoincrement())
  quantity  Int   @default(1)
  unitPrice Float

  invoice   Invoice @relation("InvoiceItems", fields: [invoiceId], references: [id])
  invoiceId Int

  service   Service @relation("InvoiceItemService", fields: [serviceId], references: [id])
  serviceId Int

  horse   Horse? @relation("HorseInvoiceItems", fields: [horseId], references: [id])
  horseId Int?
}

model ScanEvent {
  id        Int      @id @default(autoincrement())
  code      String
  action    String
  timestamp DateTime @default(now())
  synced    Boolean  @default(false)

  client   Client? @relation("ClientScans", fields: [clientId], references: [id])
  clientId Int?

  horse   Horse? @relation("HorseScans", fields: [horseId], references: [id])
  horseId Int?

  invoice   Invoice? @relation("InvoiceScans", fields: [invoiceId], references: [id])
  invoiceId Int?

  employee   Employee? @relation("EmployeeScans", fields: [employeeId], references: [id])
  employeeId Int?

  service   Service? @relation("ScanEventService", fields: [serviceId], references: [id])
  serviceId Int?
}

model Address {
  id        Int         @id @default(autoincrement())
  street    String
  city      String
  state     String
  zip       String
  latitude  Float?
  longitude Float?
  type      AddressType

  // Polymorphic relations
  user   User? @relation("UserAddresses", fields: [userId], references: [id])
  userId Int?

  client   Client? @relation("ClientAddresses", fields: [clientId], references: [id])
  clientId Int?
}

enum AddressType {
  BUSINESS
  ROUTE
}

model User {
  id    Int    @id @default(autoincrement())
  name  String
  email String @unique
  phone String

  // Relations
  addresses Address[] @relation("UserAddresses")
}
